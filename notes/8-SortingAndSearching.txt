// Sorting and Searching
// Selection Sort
	// Given...
	int a[] = {3, 6, 1, 8}
	// Find the smallest element in the array and exchange it with a[0]
	a = {1, 6, 3, 8};
	// Find the next smallest element in the array and exchange it with a[1]
	a = {1, 3, 6, 8};
	// And so on
	// Sorted after n - 1 passes in an array of length n
	// After the kth pass, which k is a constant, the first k elements are in their final sorted position

// Insertion Sort
// Go through the array from each index and insert each object where it should be in the subarray behind it.... push up whatever is between the insertion 
// point and the object's previous index
// Sorted after n - 1 passes in an array of length n

// Recursive sorts

// Better for very long arrays
// Essentially...
	// If there is more than one element in the array
	// Break the array into two halves
	// Mergesort the left half
	// Mergesort the right half
	// Merge the two subarrays into a sorted array

	// 1. Start with unsorted list of n elements
	// 2. Recursive calls break list into n sublists, each of length 1. NOte these n arrays each containing just one element, are sorted
	// 3. Merge adjacent pairs of lists
// Analysis
	// Major disadvantage: needs a lot of temporary arrays, so that is both slower + might be bad if you have space issues
	// Not affected by initial ordering of the elements... best / worst / average cases all have the same runtimes

// Quicksort
// Fastest known sorting algo
// How it works
	// If there are at least two elements in the array
	// partition the array
	// quicksort the left subarray
	// quicksort the right subarray
// Uses a pivot element from the array such that all item to the left are greater
	// moves completely to the left
	// goes from the first index to the last index, swaps things that should be on the left / right.. until the left / right indexes are the same
	// Essentially goes through the entire array, arranging the blocks in the right position even tho you don't know the exact positions of everythign else 
// Analysis
	// For fastest run time, should be partitioned into arrays of the same size
	// If the pivot is the largest or smallest element in the array, the split becomes really bad, and the entier thing becomes like a slower, recursive selection sort
	// Worst case is if the algorithm repeatedly divides the array into arrays of size 1 and n - 1... Don't use this with presorted arrays, that would be really bad

// For 7 elements and below, it is faster to use selection or insertion sort than merge or quick-sort 

// Searching
// Sequential search
	// Search for a key in a list of n elements
	// Sequential search starts at the first element and compares the key to each element until the element is found
// Analysis
	// Best case as key in first slot
	// Worst case is if it is not in the list or if it is in the last slot
	// worst case -> all n elements examined 
	// n/2 comparisons on avg

// Binary search
	// Divide and conquer approach for a SORTED array
	// ONly comparable objects can be sorted / can have binary search performed on them (bc has to be sorted)
	// Divides everything in two... divides subarrays into two based on whether the object you're looking for is larger or smaller than the 
		// object found in the (current) middle 

// Implementation:
public Object binSearch(low, high, a, obj) {
	if (low > high) 
		return -1;
	else {
		mid = (low + high)/2;
		if (obj.compareTo(a[mid]) == 0) {
			return mid;
		}
		else if (obj.compareTo(a[mid]) < 0) {
			binSearch(<params for searching in the lower half of the array>);
		}
		else {
			binSearch(<params for searching in the upper half of the array>);
		}
	}
}

// Best case: key is found first try (low + high)/2 is index of key
// Worst case: key is at the end of a subarray.
	// How to find how many maximum tries until the worst case could be found:
	// Take n, the number of elements in the array to be tested, and then round up to the next power of two
	// then find log_2(POT) -> max tries	